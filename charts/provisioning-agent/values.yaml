---
# Provisioning Agent Deployment Values
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Specifies how many replicas of a deployed pod shall be created during the deployment
# Note: If horizontal pod autoscaling is enabled this setting has no effect
replicaCount: 1

image:
  # -- Which derivate of the provisioning agent to use
  repository: ghcr.io/catenax-ng/product-agents/provisioning-agent
  # -- [Kubernetes image pull policy](https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy) to use
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion
  tag: ""

imagePullSecret:
  # -- Image pull secret to create to [obtain the container image from private registries](https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry)
  # Note: This value needs to adhere to the [(base64 encoded) .dockerconfigjson format](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#registry-secret-existing-credentials).
  # Furthermore, if 'imagePullSecret.dockerconfigjson' is defined, it takes precedence over 'imagePullSecrets'.
  dockerconfigjson: ""

# -- Existing image pull secret to use to [obtain the container image from private registries](https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry)
imagePullSecrets: []

# -- Overrides the charts name
nameOverride: ""

# -- Overrides the releases full name
fullnameOverride: ""

# -- Additional custom Labels to add
customLabels: {}

serviceAccount:
  # -- Specifies whether a [service account](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) should be created per release
  create: true
  # -- [Annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to add to the service account
  annotations: {}
  # -- The name of the service account to use. If not set and create is true, a name is generated using the release's fullname template
  name: ""

# -- Whether to [automount kubernetes API credentials](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server) into the pod
automountServiceAccountToken: false

# -- [Annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) added to deployed [pods](https://kubernetes.io/docs/concepts/workloads/pods/)
podAnnotations: {}

# The [pod security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) defines privilege and access control settings for a Pod within the deployment
podSecurityContext:
  seccompProfile:
    # -- Restrict a Container's Syscalls with seccomp
    type: RuntimeDefault
  # -- Runs all processes within a pod with a special uid
  runAsUser: 10001
  # -- Processes within a pod will belong to this guid
  runAsGroup: 30000
  # -- The owner for volumes and any files created within volumes will belong to this guid
  fsGroup: 30000

# The [container security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container) defines privilege and access control settings for a Container within a pod
securityContext:
  capabilities:
    # -- Specifies which capabilities to drop to reduce syscall attack surface
    drop:
      - ALL
    # -- Specifies which capabilities to add to issue specialized syscalls
    add: 
      - NET_BIND_SERVICE
  # -- Whether the root filesystem is mounted in read-only mode
  readOnlyRootFilesystem: true
  # -- Controls [Privilege Escalation](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privilege-escalation) enabling setuid binaries changing the effective user ID
  allowPrivilegeEscalation: false
  # -- Requires the container to run without root privileges
  runAsNonRoot: true
  # -- The container's process will run with the specified uid
  runAsUser: 10001
  # -- The container's process will run with the specified uid
  runAsGroup: 30000

livenessProbe:
  # -- Whether to enable kubernetes [liveness-probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  # -- Minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 3
  # -- Number of seconds each period lasts.  
  periodSeconds: 60
  # -- number of successful tries which reenables liveness
  successThreshold: 1
  # -- number of seconds until a timeout is assumed
  timeoutSeconds: 5

readinessProbe:
  # -- Whether to enable kubernetes readiness-probes
  enabled: true
  # -- Minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 3
  # -- Number of seconds each period lasts.  
  periodSeconds: 300
  # -- number of successful tries which reenables liveness
  successThreshold: 1
  # -- number of seconds until a timeout is assumed
  timeoutSeconds: 5

startupProbe:
  # -- Whether to enable kubernetes startup-probes
  enabled: true
  # -- Minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 18
  # -- Number of seconds after the container has started before liveness probes are initiated.
  initialDelaySeconds: 60
  # -- Number of seconds each period lasts.  
  periodSeconds: 30
  # -- number of successful tries which reenables liveness
  successThreshold: 1
  # -- number of seconds until a timeout is assumed
  timeoutSeconds: 5

# -- Ontologies to be included
ontologies:
  cx-ontology.xml: resources/cx-ontology.xml
  cx-ontology.ttl: resources/cx-ontology.ttl

## Endpoints exposed by the provisioning agent
bindings:
  # -- Diagnostic trouble code endpoint/binding
  dtc: 
    port: 8080
    path: (/|$)(.*)
    settings: 
      jdbc.url: "jdbc:h2:file:/opt/ontop/database/db;INIT=RUNSCRIPT FROM '/opt/ontop/data/dtc.sql'"
      jdbc.driver: "org.h2.Driver"
    ontology: cx-ontology.xml
    mapping: |-
      [PrefixDeclaration]
      cx:			https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#
      cx-diag:	https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#
      owl:		http://www.w3.org/2002/07/owl#
      rdf:		http://www.w3.org/1999/02/22-rdf-syntax-ns#
      xml:		http://www.w3.org/XML/1998/namespace
      xsd:		http://www.w3.org/2001/XMLSchema#
      obda:		https://w3id.org/obda/vocabulary#
      rdfs:		http://www.w3.org/2000/01/rdf-schema#
      
      [MappingDeclaration] @collection [[
      mappingId	dtc-meta
      target		cx:BusinessPartner/{bpnl} rdf:type cx:BusinessPartner ; cx:BPNL {bpnl}^^xsd:string . 
      source		SELECT distinct "bpnl" FROM "dtc"."meta"

      mappingId	dtc-content
      target		cx-diag:DTC/{id} rdf:type cx-diag:DTC ; cx-diag:Code {code}^^xsd:string ; cx-diag:Description {description}^^xsd:string ; cx-diag:PossibleCauses {possible_causes}^^xsd:string ; cx-diag:Version {lock_version}^^xsd:long . 
      source		SELECT * FROM "dtc"."content"

      mappingId	dtc-meta-content
      target		cx-diag:DTC/{id} cx:provisionedBy cx:BusinessPartner/{bpnl}. 
      source		SELECT "bpnl","id" FROM "dtc"."content"

      mappingId	dtc-part
      target		cx-diag:DiagnosedPart/{entityGuid} rdf:type cx-diag:DTCPart ; cx-diag:EnDenomination {enDenomination}^^xsd:string ; cx-diag:Classification {classification}^^xsd:string ; cx-diag:Category {category}^^xsd:string.
      source		SELECT * FROM "dtc"."part"

      mappingId	dtc-part-content
      target		cx-diag:DTC/{dtc_id} cx-diag:affects cx-diag:DiagnosedPart/{part_entityGuid}. 
      source		SELECT "part_entityGuid","dtc_id" FROM "dtc"."content_part"

      mappingId	dtc-meta-part
      target		cx-diag:DiagnosedPart/{entityGuid} cx:provisionedBy cx:BusinessPartner/{bpnl}. 
      source		SELECT "bpnl","entityGuid" FROM "dtc"."part"
      ]]

service:
  # -- [Service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) to expose the running application on a set of Pods as a network service.
  type: ClusterIP

## Ingress declaration to expose the network service.
ingresses:
  ## Public / Internet facing Ingress
  - enabled: true
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    hostname: "provisioning-agent.local"
    # -- Additional ingress annotations to add
    annotations: 
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    # -- Agent endpoints exposed by this ingress resource
    endpoints:
      - dtc
    # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
    className: ""
    # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
    tls:
      # -- Enables TLS on the ingress resource
      enabled: false
      # -- If present overwrites the default secret name
      secretName: ""
    ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
    certManager:
      # -- If preset enables certificate generation via cert-manager namespace scoped issuer
      issuer: ""
      # -- If preset enables certificate generation via cert-manager cluster-wide issuer
      clusterIssuer: ""

# -- [Resource management](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) applied to the deployed pod
# We recommend using 50% of CPU and 0.5Gi of memory per exported endpoint
resources:
  requests:
    cpu: 500m
    memory: 512Mi
  limits:
    cpu: 500m
    memory: 512Mi

autoscaling:
  # -- Enables [horizontal pod autoscaling](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)
  enabled: false
  # -- Minimal replicas if resource consumption falls below resource threshholds
  minReplicas: 1
  # -- Maximum replicas if resource consumption exceeds resource threshholds
  maxReplicas: 100
  # -- targetAverageUtilization of cpu provided to a pod
  targetCPUUtilizationPercentage: 80
  # -- targetAverageUtilization of memory provided to a pod
  targetMemoryUtilizationPercentage: 80

# -- [Node-Selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) to constrain the Pod to nodes with specific labels.
nodeSelector: {}

# -- [Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) are applied to Pods to schedule onto nodes with matching taints.
tolerations: []

# -- [Affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity) constrains which nodes the Pod can be scheduled on based on node labels.
affinity: {}

# -- Container environment variables e.g. for configuring [JAVA_TOOL_OPTIONS](https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/envvars002.html)
# Ex.:
#   JAVA_TOOL_OPTIONS: >
#     -Dhttp.proxyHost=proxy -Dhttp.proxyPort=80 -Dhttp.nonProxyHosts="localhost|127.*|[::1]" -Dhttps.proxyHost=proxy -Dhttps.proxyPort=443
env: {}

# -- [Kubernetes Secret Resource](https://kubernetes.io/docs/concepts/configuration/secret/) name to load environment variables from
envSecretName:
